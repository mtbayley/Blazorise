@typeparam TItem
<Div Class="b-scheduler-slot" Position="Position.Relative" Margin="Margin.IsAuto" Width="Blazorise.Width.Is100" Height="Height.Is100" Border="@BottomBorder" Background="@BackgroundColor" @onmouseenter="@OnMouseEnter" @onmouseleave="@OnMouseLeave" @onclick="@OnSlotClicked">
    @foreach ( var appointment in Appointments ?? Enumerable.Empty<SchedulerAppointment>() )
    {
        <Span Background="Background.Warning" Flex="Flex.JustifyContent.Start.AlignItems.Center">
            @appointment.Title
        </Span>
    }
</Div>
@code {
    protected Task OnMouseEnter( MouseEventArgs eventArgs )
    {
        MouseHovering = true;

        return Task.CompletedTask;
    }

    protected Task OnMouseLeave( MouseEventArgs eventArgs )
    {
        MouseHovering = false;

        return Task.CompletedTask;
    }

    protected Task OnSlotClicked()
    {
        return Clicked.InvokeAsync( Time );
    }

    private bool MouseHovering { get; set; }

    IFluentBorder BottomBorder => Last ? null : Blazorise.Border.Is1.OnBottom;

    private Blazorise.Background BackgroundColor => MouseHovering
       ? Blazorise.Background.Light
       : Blazorise.Background.Default;

    IEnumerable<SchedulerAppointment> Appointments => Scheduler?.Appointments?
        .Where( x => x.Start.Year == Date?.Year && x.Start.Month == Date?.Month && x.Start.Day == Date?.Day
            && x.Start.Hour == Hour && x.Start.Minute >= Time.Minutes && x.Start.Minute <= Time.Minutes );
    
    [CascadingParameter] public Scheduler<TItem> Scheduler { get; set; }

    [Parameter] public EventCallback<TimeSpan> Clicked { get; set; }

    [Parameter] public DateOnly? Date { get; set; }

    [Parameter] public int Hour { get; set; }

    [Parameter] public TimeSpan Time { get; set; }

    [Parameter] public bool Last { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }
}